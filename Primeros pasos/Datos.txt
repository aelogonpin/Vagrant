Añadir una primera imagen (Ubuntu Trusty de 64 bits).

vagrant box add ubuntu/trusty64

Uso básico de vagrant: vagrant init, vagrant up, vagrant status, vagrant halt y vagrant destroy.

Creamos un directorio para cada proyecto, accedemos al proyecto y creamos un fichero de configuración básico de vagrant con:

   vagrant init -m ubuntu/trusty64
Levantamos la máquina con, que copiará la imagen como una nueva máquina y la arrancará:

   vagrant up
Accedemos a la máquina con:

   vagrant ssh
Comprobamos en todo momento el estado de la máquina con:

   vagrant status
Podemos parar la máquina con:

   vagrant halt
Si de nuevo levantamos la máquina, se reutilizará la máquina anteriormente creada y los cambios que se hubieran efectuado en ella. Cuando no queramos volver a utilizar esa máquina la eliminamos permanentemente con:

   vagrant destroy







   Uso de una máquina ya configurada, por ejemplo rasmus/php7dev que contiene los paquetes necesarios para ejecutar una aplicación web con PHP7.

Instalamos la imagen:
   vagrant box add rasmus/php7dev
Clonamos el repositorio que contiene el Vagrantfile configurado con las características de esta imagen:

   git clone https://github.com/rlerdorf/php7dev.git
Accedemos al directorio “php7dev”, arrancamos la máquina y accedemos a ella:

   cd php7dev
   vagrant up
   vagrant ssh
Si queremos acceder a la web con php7 basta con poner en el navegador:

   http://192.168.7.7
Ya que la configuración de Vagrant crea una red específica para esa máquina y la configura con esa IP estática.

vagrant ya de por si en los entornos de virtualbox utiliza la herramienta de carpeta compartida para poder realizar 
dichas comparticones de documentos:
Esot se podra utilizar adentro de las maquinas virtuales median el uso de " cd /vagrant"

Para poder ver mas a fondo respecto a los repositorios de los vagrants:
Podemos acceder mediante: "/carpeta_nombre_usuario/.vagrant.d/*


Para reempaquetar un modelo de bo para vagrant podremos realizar las siguientes acciones:
vagrant box repackage centos/7 virtualbox 1703.01

vagrant "comando"
box "atributo"
repackage "accion"
centos/7 "nombre_del_box"
virtualbox "Entorno de virtualizacion"
1703.01 "Version del box"

Dejando en un fichero "*.box"

Ese "*.box" se podra utiliza mediante estos comandos:
vagrant box add my-box name-of-the-box.box
vagrant init my-box
vagrant up




Borrar la imagen de centos

vagrant box remove centos/7
Instalar de nuevo el box de CentOS 7 desde el fichero “.box” en lugar de hacerlo desde Atlas:

vagrant box add package.box --name centos/7



Comprobar si están actualizadas las imágenes:

vagrant box outdated --global
En el caso de imágenes desactualizadas se pueden eliminar con:

vagrant box prune
Para actualizar el box correspondiente a un escenario se utiliza (sólo válido si se ha descargado de Atlas o similar):

vagrant box update






Crear un box de Vagrant desde una máquina virtual de VirtualBox.

Obtenermos el nombre de la máquina virtual:

   VBoxManage list vms
La “empaquetamos” como un box de vagrant con:

   vagrant package --base "Nombre de la MV" --output maquina.box


Aunque la configuración completa de las redes lo dejamos para una sección posterior, una funcionalidad muy útil y sencilla es la redirección de puertos de la red por defecto que utiliza Vagrant (red interna con NAT). Configura un Vagrantfile para que las peticiones al puerto 8080/tcp de la máquina anfitriona se redirijan al puerto 80/tcp de la máquina virtual.

La documentación completa se encuentra en Forwarded Ports.

   ...
   config.vm.network "forwarded_port", guest: 80, host: 8080
   ...
Podemos ver en todo momento los puertos que se har redireccionado con la instrucción:

   vagrant port
Estos cambios se pueden realizar sobre una máquina ya funcionando y para que se apliquen se utiliza la opción:

   vagrant reload



 vagrant list-commands
   Below is a listing of all available Vagrant commands and a brief
   description of what they do.
   box             manages boxes: installation, removal, etc.
   cap             checks and executes capability
   connect         connect to a remotely shared Vagrant environment
   destroy         stops and deletes all traces of the vagrant machine
   docker-exec     attach to an already-running docker container
   docker-logs     outputs the logs from the Docker container
   docker-run      run a one-off command in the context of a container
   global-status   outputs status Vagrant environments for this user
   halt            stops the vagrant machine
   help            shows the help for a subcommand
   init            initializes a new Vagrant environment by creating a Vagrantfile
   list-commands   outputs all available Vagrant subcommands, even non-primary ones
   login           log in to HashiCorp’s Atlas
   package         packages a running vagrant environment into a box
   plugin          manages plugins: install, uninstall, update, etc.
   port            displays information about guest port mappings
   powershell      connects to machine via powershell remoting
   provider        show provider for this environment
   provision       provisions the vagrant machine
   push            deploys code in this environment to a configured destination
   rdp             connects to machine via RDP
   reload          restarts vagrant machine, loads new Vagrantfile configuration
   resume          resume a suspended vagrant machine
   rsync           syncs rsync synced folders to remote machine
   rsync-auto      syncs rsync synced folders automatically when files change
   share           share your Vagrant environment with anyone in the world
   snapshot        manages snapshots: saving, restoring, etc.
   ssh             connects to machine via SSH
   ssh-config      outputs OpenSSH valid configuration to connect to the machine
   status          outputs status of the vagrant machine
   suspend         suspends the machine
   up              starts and provisions the vagrant environment
   version         prints current and latest Vagrant version











vagrant snapshot save apache-limpio
==> apache-limpio: Snapshotting the machine as 'apache-limpio'...
==> apache-limpio: Snapshot saved! You can restore the snapshot at any time by
==> apache-limpio: using `vagrant snapshot restore`. You can delete it using
==> apache-limpio: `vagrant snapshot delete`.






vagrant snapshot restore apache-limpio
   




Podemos acceder a la máquina virtual utilizando la nueva red privada, ya que la máquina anfitriona también está conectada a esa red:

   ssh -i .vagrant/machines/default/virtualbox/private_key vagrant@192.168.33.10








   Configura un entorno de vagrant para que la máquina virtual esté conectada en modo puente a la misma red que la máquina anfitriona.

   config.vm.network  "public_network", bridge: "eth0"
Accedemos a la máquina y vemos las interfaces de red así como la configuración de /etc/network/interfaces:

   ...
   #VAGRANT-BEGIN
   # The contents below are automatically generated by Vagrant. Do not
   modify.
   auto eth1
   iface eth1 inet dhcp
       post-up route del default dev $IFACE || true
   #VAGRANT-END






Creamos el fichero actualizar.sh ubicado en el mismo directorio que el Vagrantfile y con el siguiente contenido:

   #!/bin/bash
   apt-get update
   DEBIAN_FRONTEND=noninteractive apt-get -y upgrade
Creamos el siguiente Vagrantfile:

   Vagrant.configure("2") do |config|
     config.vm.box = "ubuntu/trusty64"
     config.vm.provision "shell", path: "actualizar.sh"
   end




   Para cargar un vagrant con los comandos de ".sh" sera necesarios añadir el atributo:
   "--provision
   vagrant provision"











   ---
- hosts: all
  sudo: True
  tasks:
    - name: Ensure system is updated
      apt: update_cache=yes upgrade=yes
Y el correspondiente Vagrantfile sería:

Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/trusty64"
  config.vm.provision "ansible" do |ansible|
    ansible.playbook = "site.yml"
  end
end
Más que un ejercicio, el siguiente es un ejemplo de configuración integrada de vagrant con ansible, desplegando un clúster de balanceo de carga mediante un round-robin en un servidor DNS

Clona el siguiente repositorio y sigue las instrucciones que se incluyen en el fichero README.md:

https://github.com/albertomolina/ejemplo-ansible-vagrant








La funcionalidad de Vagrant es extensible mediante plugins, desarrollados por la propia Hashicorp o por terceros. La documentación de Vagrant describe de forma detallada los conceptos básicos para el desarrollo de los mismos: https://www.vagrantup.com/docs/plugins/


















Siguiendo con la metodología de este curso, vamos a mostrar algunos ejemplos del uso de plugins mediante algunos ejercicios.

Ejercicios
Comprueba los plugins instalados en vagrant

vagrant plugin list
vagrant-share (1.1.7, system)
Instala el plugin de vagrant para utilizar AWS como proveedor (desarrollado también por M. Hashimoto).

Este plugin se encuentra en Github: https://github.com/mitchellh/vagrant-aws

La instalación del plugin es realmente sencilla, basta con hacer:

vagrant plugin install vagrant-aws
Installing the 'vagrant-aws' plugin. This can take a few minutes...
Fetching: ipaddress-0.8.3.gem (100%)
Fetching: formatador-0.2.5.gem (100%)
Fetching: excon-0.55.0.gem (100%)
Fetching: fog-core-1.43.0.gem (100%)
Fetching: fog-xml-0.1.3.gem (100%)
Fetching: fog-json-1.0.2.gem (100%)
Fetching: trollop-2.1.2.gem (100%)
Fetching: CFPropertyList-2.3.5.gem (100%)
Fetching: rbvmomi-1.11.0.gem (100%)
Fetching: fission-0.5.0.gem (100%)
Fetching: inflecto-0.0.2.gem (100%)
Fetching: xml-simple-1.1.5.gem (100%)
Fetching: fog-digitalocean-0.3.0.gem (100%)
Fetching: fog-xenserver-0.3.0.gem (100%)
Fetching: fog-vsphere-1.9.1.gem (100%)
Fetching: fog-voxel-0.1.0.gem (100%)
Fetching: fog-vmfusion-0.1.0.gem (100%)
Fetching: fog-terremark-0.1.0.gem (100%)
Fetching: fog-storm_on_demand-0.1.1.gem (100%)
Fetching: fog-softlayer-1.1.4.gem (100%)
Fetching: fog-serverlove-0.1.2.gem (100%)
Fetching: fog-sakuracloud-1.7.5.gem (100%)
Fetching: fog-riakcs-0.1.0.gem (100%)
Fetching: fog-radosgw-0.0.5.gem (100%)
Fetching: fog-rackspace-0.1.5.gem (100%)
Fetching: fog-profitbricks-3.0.0.gem (100%)
Fetching: fog-powerdns-0.1.1.gem (100%)
Fetching: fog-openstack-0.1.20.gem (100%)
Fetching: fog-local-0.3.1.gem (100%)
Fetching: fog-google-0.1.0.gem (100%)
Fetching: fog-ecloud-0.3.0.gem (100%)
Fetching: fog-dynect-0.0.3.gem (100%)
Fetching: fog-dnsimple-1.0.0.gem (100%)
Fetching: fog-cloudatcost-0.1.2.gem (100%)
Fetching: fog-brightbox-0.11.0.gem (100%)
Fetching: fog-aws-1.3.0.gem (100%)
Fetching: fog-atmos-0.1.0.gem (100%)
Fetching: fog-aliyun-0.1.0.gem (100%)
Fetching: iniparse-1.4.2.gem (100%)
Fetching: fog-1.40.0.gem (100%)
------------------------------
Thank you for installing fog!

IMPORTANT NOTICE:
If there's a metagem available for your cloud provider,
e.g. `fog-aws`,
you should be using it instead of requiring the full fog collection
to avoid
unnecessary dependencies.

'fog' should be required explicitly only if:
- The provider you use doesn't yet have a metagem available.
- You require Ruby 1.9.3 support.
------------------------------
Fetching: vagrant-aws-0.7.2.gem (100%)
Installed the plugin 'vagrant-aws (0.7.2)'!
Tal como se indica en la documentación, es necesario instalar un box “dummy” para que no nos dé un error de formato el Vagrantfile:

vagrant box add dummy https://github.com/mitchellh/vagrant-aws/raw/master/dummy.box
Se podría utilizar directamente poniendo las credenciales de acceso en el fichero Vagrantfile, pero parece más razonable utilizar un entorno de AWS estándar como el siguiente:

/home/alberto/.aws
├── config
└── credentials
Siendo el contenido del fichero config:

[default]
region=eu-west-1
Y del fichero credentials:

[default]
aws_access_key_id = ...
aws_secret_access_key = ...
Como último paso previo, cargamos en el agente ssh de nuestro entorno la clave privada ssh que queramos utilizar en AWS, por ejemplo:

 ssh-add ~/.ssh/clave-aws.pem
Y utilizamos el siguiente fichero Vagrantfile que lanza una instancia de tipo m3.medium en la región escogida, le asigna una dirección IP pública y le instala rsync para utilizar el directorio compartido:

 Vagrant.configure("2") do |config|
   config.vm.box = "dummy"
   config.ssh.keys_only = false
   config.vm.provider :aws do |aws, override|
     aws.keypair_name = "clave-aws"
     aws.ami = "ami-3291be54"
     override.ssh.username = "admin"
   end
end









Utiliza el plugin vagrant-persistent-storage para incluir almacenamiento permanente sin necesidad de utilizar parámetros de VBoxManage en bruto.

Este plugin está disponible en Github y no es “oficial”: https://github.com/kusnier/vagrant-persistent-storage

Lo instalamos de forma idéntica al caso anterior:

vagrant plugin install vagrant-persistent-storage
Y añadimos las siguientes líneas a nuestro fichero Vagrantfile
(para un disco adicional de hasta 5 GiB, con sistema de ficheros
ext4 y montado en el directorio /var/lib/mysql):

...
config.persistent_storage.enabled = true
config.persistent_storage.location = "tmp/disk.vdi"
config.persistent_storage.size = 5000
config.persistent_storage.mountname = 'mysql'
config.persistent_storage.filesystem = 'ext4'
config.persistent_storage.mountpoint = '/var/lib/mysql'
config.persistent_storage.volgroupname = 'myvolgroup'
...






















